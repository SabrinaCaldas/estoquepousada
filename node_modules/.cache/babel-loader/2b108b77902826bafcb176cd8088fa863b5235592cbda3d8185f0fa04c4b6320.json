{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, createContext, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Cria o contexto do usuário\nconst UserContext = /*#__PURE__*/createContext();\n\n// Função para verificar as credenciais (substitua pela sua lógica de autenticação)\nconst authenticateUser = (email, password) => {\n  // Simulação de autenticação (substitua pela sua lógica real)\n  const users = {\n    'sabrina@gmail.com': 'Scaldas1330'\n  };\n  return users[email] === password;\n};\n\n// Componente da tela de login\nfunction Login() {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n  const handleLogin = () => {\n    if (authenticateUser(email, password)) {\n      // Armazena o usuário no contexto (substitua por sua lógica de armazenamento)\n      setUser({\n        email\n      });\n      navigate('/menu');\n    } else {\n      // Exibir mensagem de erro\n      alert('Credenciais inválidas');\n    }\n  };\n\n  // ... restante do componente\n}\n_s(Login, \"OqFWRqNCJ3BNGyYdED5qKBGtbCw=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","createContext","useContext","useNavigate","UserContext","authenticateUser","email","password","users","Login","_s","setEmail","setPassword","navigate","handleLogin","setUser","alert","_c","$RefreshReg$"],"sources":["C:/estoquepousada/src/hooks/useFetchData.js"],"sourcesContent":["import React, { useState, createContext, useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Cria o contexto do usuário\r\nconst UserContext = createContext();\r\n\r\n// Função para verificar as credenciais (substitua pela sua lógica de autenticação)\r\nconst authenticateUser = (email, password) => {\r\n  // Simulação de autenticação (substitua pela sua lógica real)\r\n  const users = {\r\n    'sabrina@gmail.com': 'Scaldas1330',\r\n  };\r\n  return users[email] === password;\r\n};\r\n\r\n// Componente da tela de login\r\nfunction Login() {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = () => {\r\n    if (authenticateUser(email, password)) {\r\n      // Armazena o usuário no contexto (substitua por sua lógica de armazenamento)\r\n      setUser({ email });\r\n      navigate('/menu');\r\n    } else {\r\n      // Exibir mensagem de erro\r\n      alert('Credenciais inválidas');\r\n    }\r\n  };\r\n\r\n  // ... restante do componente\r\n}\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAClE,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,WAAW,gBAAGH,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMI,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC5C;EACA,MAAMC,KAAK,GAAG;IACZ,mBAAmB,EAAE;EACvB,CAAC;EACD,OAAOA,KAAK,CAACF,KAAK,CAAC,KAAKC,QAAQ;AAClC,CAAC;;AAED;AACA,SAASE,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACJ,KAAK,EAAEK,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,QAAQ,EAAEK,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMa,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIT,gBAAgB,CAACC,KAAK,EAAEC,QAAQ,CAAC,EAAE;MACrC;MACAQ,OAAO,CAAC;QAAET;MAAM,CAAC,CAAC;MAClBO,QAAQ,CAAC,OAAO,CAAC;IACnB,CAAC,MAAM;MACL;MACAG,KAAK,CAAC,uBAAuB,CAAC;IAChC;EACF,CAAC;;EAED;AACF;AAACN,EAAA,CAjBQD,KAAK;EAAA,QAGKN,WAAW;AAAA;AAAAc,EAAA,GAHrBR,KAAK;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}